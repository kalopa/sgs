#
# Copyright (c) 2013-2023, Kalopa Robotics Limited.  All rights
# reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.
#
# THIS SOFTWARE IS PROVIDED BY KALOPA ROBOTICS LIMITED "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL KALOPA
# ROBOTICS LIMITED BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# ABSTRACT
#

##
# Routines for handling sailboat alarms. Note that this is the definitive
# list of alarms on the system. To add or modify an alarm, do so here.
#
module SGS
  ##
  # Deal with alarm subsystem.
  #
  class Alarm < RedisBase
    attr_accessor :last_report, :time

    #
    # Alarms generated by Otto.
    OTTO_RESTART = 0
    MISSION_SWITCH = 1
    RUDDER_FAULT = 2
    SAIL_FAULT = 3
    BATTERY_FAULT = 4
    SOLAR_FAULT = 5
    COMPASS_FAULT = 6
    ACCEL_FAULT = 7
    WDI_FAULT = 8
    MOTHER_UNRESP = 9
    RESERVED1 = 10
    RESERVED2 = 11
    RESERVED3 = 12
    RESERVED4 = 13
    RESERVED5 = 14
    RESERVED6 = 15
    #
    # Alarms generated by Mother.
    OTTO_FAULT = 16
    MISSION_COMMENCE = 17
    MISSION_COMPLETE = 18
    MISSION_ABORT = 19
    WAYPOINT_REACHED = 20
    CROSS_TRACK_ERROR = 21
    INSIDE_FENCE = 22

    ALARM_NAMES = [
      "OTTO Restarted Unexpectedly",
      "Mission Activation Switch",
      "Fault in Rudder Control System",
      "Fault in Sail Control System",
      "Battery Failure",
      "Failure in Solar Array",
      "Fault in Electronic Compass",
      "Fault in Accelerometer",
      "Fault in Wind Direction Indicator",
      "Mother is Unresponsive",
      "** Reserved 1 **",
      "** Reserved 2 **",
      "** Reserved 3 **",
      "** Reserved 4 **",
      "** Reserved 5 **",
      "** Reserved 6 **",
      "Fault with OTTO Communications",
      "Mission has commenced",
      "Mission is completed",
      "*** MISSION ABORT ***",
      "Waypoint has been reached",
      "Significant cross-track error",
      "Vessel is inside the fence"
    ].freeze

    def initialize
      @count = 0
      @last_report = nil
      @time = Array.new(32, Time.at(0))
      super
    end

    #
    # Main daemon function (called from executable)
    def self.daemon
      puts  "Alarm daemon starting up. VERSION: #{SGS::VERSION}"
      otto = RPCClient.new(:otto)
      loop do
        #puts "Check for any alarms..."
        #resp = otto.command "A?"
        #puts "Response: #{resp}"
        sleep 30
      end
    end

    #
    # Build a C include file based on the current alarm definitions
    def self.build_include(fname)
      alarm = new
      File.open(fname, "w") do |f|
        f.puts "/*\n * Autogenerated by #{__FILE__}.\n * DO NOT HAND-EDIT!\n */"
        constants.sort.each do |c|
          unless c == :ALARM_NAMES
            cval = Alarm.const_get(c)
            str = "#define SGS_ALARM_#{c.to_s}"
            str += "\t" if str.length < 32
            str += "\t#{cval}\t/* #{alarm.name(cval)} */"
            f.puts str
          end
        end
      end
    end

    #
    # Convert an alarm number into a string.
    def name(alarmno)
      ALARM_NAMES[alarmno]
    end
  end
end
