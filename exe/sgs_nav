#!/usr/bin/env ruby
#
# Copyright (c) 2014-2022, Kalopa Robotics Limited.  All rights
# reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.
#
# THIS SOFTWARE IS PROVIDED BY KALOPA ROBOTICS LIMITED "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL KALOPA
# ROBOTICS LIMITED BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# ABSTRACT
# This is the main navigator function. It listens for GPS messages
# and computes the mission details from the current boat position. It
# understands the various boat-state functions so that it won't try to
# steer the boat if it is in a passive state.
#
require 'sgslib'

#
# Load the mission data from Redis and augment it with the contents of the
# mission file.
SGS::Log.info("sgs_nav starting up")

config = SGS::Config.load
mission = SGS::Mission.file_load config.mission_file

while mission.get_state < SGS::Mission::STATE_ON_MISSION
  SGS::Log.info "Not in a mission - state is '#{mission.state_name}'..."
  sleep 10
end

#
# Now listen for GPS data
SGS::Log.info("Waiting for GPS data...")
SGS::GPS.subscribe do |count|
  SGS::Log.info "Received new count: #{count}"
  gps = SGS::GPS.load
  p gps
end
exit 0
